<?xml version="1.0" encoding="UTF-8"?>    
<!DOCTYPE generatorConfiguration
PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"    
"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- 引入外部资源 -->
	<properties resource="jdbc.properties" />
	<context id="sqlserverTables" targetRuntime="MyBatis3">
		<!-- 生成的pojo，将implements Serializable -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin"></plugin>
		<commentGenerator>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>
		<!-- 数据库链接URL、用户名、密码 -->
		<jdbcConnection driverClass="${jdbc.driverClassName}" connectionURL="${jdbc.url}"
			userId="${jdbc.username}" password="${jdbc.password}">
		</jdbcConnection>
		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<!-- 生成model模型，对应的包路径，以及文件存放路径(targetProject)，targetProject可以指定具体的路径,如./src/main/java， 也可以使用“MAVEN”来自动生成，这样生成的代码会在target/generatord-source目录下 -->
		<javaModelGenerator targetPackage="${domainPackage}" targetProject="./src">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!-- 从数据库返回的值被清理前后的空格 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>
		<!--对应的mapper.xml文件 -->
		<sqlMapGenerator targetPackage="${mapperPackage}" targetProject="./src">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<!-- 对应的Mapper接口类文件 -->
		<javaClientGenerator type="XMLMAPPER" targetPackage="${mapperPackage}"
			targetProject="./src">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>
		<!-- 指定数据库表 -->
		<!-- <table schema="" tableName="dept" domainObjectName="Dept"></table> -->
		<!-- 有些表的字段需要指定java类型 -->
		<!-- <table schema="" tableName="emp" domainObjectName="Dept"> <columnOverride column="birthday" javaType="String" 
			/> </table> -->
		<!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 是否生成 example类,去除tb_开头 -->
		<table schema="" tableName="%" enableCountByExample="${enableCountByExample}" enableUpdateByExample="${enableUpdateByExample}"
			enableDeleteByExample="${enableDeleteByExample}" enableSelectByExample="${enableSelectByExample}" selectByExampleQueryId="${selectByExampleQueryId}">
			<!-- 去除类名前缀 -->
			<domainObjectRenamingRule searchString="${domainPrefix}"
				replaceString="" />
			<!-- 去除属性前缀 -->
			<!-- <columnRenamingRule searchString="${fieldPrefix}" replaceString="" /> -->
		</table>
	</context>
</generatorConfiguration>